`use strict`
/**
 * SimpleQ
 * version: 1.0.0
 * Developer: Eaglex ( http://eaglex.net ) 
 * License: CC BY-SA ( https://creativecommons.org/licenses/by/4.0/legalcode )
 * - Simple Promise, uses object.create, setter/getter to watch for change
 */
function SimpleQ(){return new function(){const e={},t={};let s=null;t.resolve=new Promise((t,s)=>{e.resolve=t}),t.reject=new Promise((t,s)=>{e.reject=s});const r=(s="resolve")=>Object.create({},{[s]:{configurable:!0,enumerable:!0,get:()=>t[s],set:t=>{this[`__${s}__set`]||(e[s](t),this[`__${s}__set`]=!0)}}}),n=r("resolve"),i=r("reject");this.resolve=((e=null)=>s?this:(n.resolve=e,s=!0,this)),this.reject=((e=null)=>s?this:(i.reject=e,s=!0,this)),this.promise=(()=>{return new Promise((e,t)=>{n.resolve.then(e),i.reject.catch(t)})})}}