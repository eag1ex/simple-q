`use strict`
/**
 * SimpleQ
 * version: 1.0.0
 * Developer: Eaglex ( http://eaglex.net ) 
 * License: CC BY-SA ( https://creativecommons.org/licenses/by/4.0/legalcode )
 * - Simple Promise, uses object.create, setter/getter to watch for change
 */
function SimpleQ(){return new function(){const e={};let t=null;this.__resolve=new Promise((t,s)=>{e.resolve=t}),this.__reject=new Promise((t,s)=>{e.reject=s});const s=(t="resolve")=>Object.create({},{[t]:{configurable:!0,enumerable:!0,get:()=>this[`__${t}`],set:s=>{this[`__${t}__set`]||(e[t](s),this[`__${t}__set`]=!0)}}}),r=s("resolve"),i=s("reject");this.resolve=((e=null)=>t?this:(r.resolve=e,t=!0,this)),this.reject=((e=null)=>t?this:(i.reject=e,t=!0,this)),this.promise=(()=>{return new Promise((e,t)=>{r.resolve.then(e),i.reject.catch(t)})})}}